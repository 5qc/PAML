function generateFors(){const e=document.querySelectorAll("for");for(let t=0;t<e.length;t++){const n=e[t],r=n.getAttribute("each"),s=n.getAttribute("in"),o=n.getAttribute("varName"),l=n.innerHTML;if("i"===o&&pamlErr('Variable name "i" is reserved.'),s.startsWith("{{")&&s.endsWith("}}"));else{const e=document.querySelector(s),t=e.querySelectorAll(r);n.innerHTML="";for(let e=0;e<t.length;e++){const r=t[e];let s=l,i=RegExp(`{{${o}}}`,"g");s=s.replace(/{{i}}/g,e.toString()),s=s.replace(i,r.innerHTML),n.innerHTML+=s}}}}const generateVariables=()=>{const e={},t=document.querySelectorAll("set");for(let n=0;n<t.length;n++){const r=t[n],s=r.getAttribute("name"),o=r.innerHTML;for(let e=0;e<bannedChars.length;e++)if(s.includes(bannedChars[e]))return pamlErr(`Variable name ${s} uses banned character (${bannedChars[e]}).`);e[s]=o,r.remove();const l=RegExp(`(?<!<if exists="){{${s}}}`,"g");document.body.innerHTML=document.body.innerHTML.replace(l,o)}},bannedChars=["{","}","."],pamlErr=e=>console.error(`[PAML] ${e}`),generateIfs=()=>{const e=e=>{if(e.getAttribute("exists"))return"exists"},t=document.querySelectorAll("if");for(let n=0;n<t.length;n++){const r=t[n],s=e(r),o=r.getAttribute(s),l="ELSE"===r.nextSibling.nodeName?r.nextSibling:"";if("exists"===s&&o.startsWith("{{")&&o.endsWith("}}")){const e=o.replace(/^{{/,"").replace(/}}$/,""),t=document.querySelectorAll("set");for(let n=0;n<t.length;n++){const s=t[n];if(e===s.getAttribute("name")){""!==l&&l.remove();const e=r.innerHTML;r.after(e),r.remove()}else if(r.remove(),""!==l){const e=l.innerHTML;l.after(e),l.remove()}}}}};let css='<style type="text/css">set{display:none}</style>';document.head.insertAdjacentHTML("beforeend",css),generateFors(),generateIfs(),generateVariables();
